#version 460
#extension GL_EXT_ray_tracing  : require
#extension GL_GOOGLE_include_directive : require

#include "RT_genData.h"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1) uniform UniformBufferObject{
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 normalMatrix;
    vec4 lightPos;
    mat4 orthoProj;
    mat4 LightDepthView;
} ubo;

layout(set = 0, binding = 2, rgba8) uniform image2D outputImage;
layout(set = 0, binding = 3, rgba32f) uniform image2D depthImage;

layout(location = 0) rayPayloadEXT RayGenData genData;

void main() {

    vec4 rayO = inverse ( ubo.view )  * vec4(0, 0, 0, 1);
    vec2 ndc = vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy) * 2.0 - 1.0;
    //ndc.y = -ndc.y;

    vec4 target = inverse ( ubo.proj) * vec4(ndc.x, ndc.y, 1, 1);
    vec4 rayD = inverse(ubo.view) * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;

    genData.color = vec3(0.0, 0.0, 0.0); // Initialize payload
    genData.depth = 1.0;

    traceRayEXT(topLevelAS,     // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        rayO.xyz,     // ray origin
        tMin,           // ray min range
        rayD.xyz,  // ray direction
        tMax,           // ray max range
        0               // payload (location = 0)
    );

    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(genData.color, 1.0));
    imageStore(depthImage, ivec2(gl_LaunchIDEXT.xy), vec4(genData.depth,0.0,0.0,0.0));
}
